//
// ToastNotificationView.m
// Generated by Core Animator version 1.0 on 3/19/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "SRToastNotificationView.h"

static NSString * const kPlaceholderName = @"toastPlaceholder";

@interface SRToastNotificationView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation SRToastNotificationView

#pragma mark - Life Cycle

+(instancetype) sharedManager{

    __block SRToastNotificationView * _sharedManager = nil;
    static dispatch_once_t  onceToken;
    dispatch_once( &onceToken, ^{
        _sharedManager = [[SRToastNotificationView alloc] initWithFrame:[UIScreen mainScreen].bounds];
    });
    return _sharedManager;
}

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,768,400)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
    NSLog(@"withFrame");
	if (self)
	{
		[self setupHierarchy];
        _toastBannerView = self.viewsByName[kPlaceholderName];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	//NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
    __scaling__.bounds = [UIScreen mainScreen].bounds;//CGRectMake(0, 0, 768, 400);
    __scaling__.center = CGPointMake(CGRectGetMidX([UIScreen mainScreen].bounds), (CGRectGetMidY([UIScreen mainScreen].bounds)));//CGPointMake(384.0, 200.0);
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *toastPlaceholder = [UIImageView new];
	toastPlaceholder.bounds = CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, 135);

	toastPlaceholder.contentMode = UIViewContentModeCenter;
	toastPlaceholder.layer.position = CGPointMake( CGRectGetMidX([UIScreen mainScreen].bounds), -67.85); // was 67.85
	[__scaling__ addSubview:toastPlaceholder];
	viewsByName[kPlaceholderName] = toastPlaceholder;

	self.viewsByName = viewsByName;
}

#pragma mark - bounceFromTop

- (void)addBounceFromTopAnimation
{
	[self addBounceFromTopAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addBounceFromTopAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addBounceFromTopAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addBounceFromTopAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addBounceFromTopAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addBounceFromTopAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addBounceFromTopAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addBounceFromTopAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *overshootTiming = [CAMediaTimingFunction functionWithControlPoints:0.00 :0.00 :0.58 :1.30];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.400;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"BounceFromTop"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"BounceFromTop"]];
	}

	CAKeyframeAnimation *toastPlaceholderTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	toastPlaceholderTranslationYAnimation.duration = 0.400;
	toastPlaceholderTranslationYAnimation.values = @[@(0.500), @(67.000), @(47.000), @(67.000)];
	toastPlaceholderTranslationYAnimation.keyTimes = @[@(0.000), @(0.500), @(0.750), @(1.000)];
	toastPlaceholderTranslationYAnimation.timingFunctions = @[overshootTiming, overshootTiming, linearTiming];
	toastPlaceholderTranslationYAnimation.beginTime = beginTime;
	toastPlaceholderTranslationYAnimation.fillMode = fillMode;
	toastPlaceholderTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationYAnimation forKey:@"bounceFromTop_TranslationY"];
}

- (void)removeBounceFromTopAnimation
{
	[self.layer removeAnimationForKey:@"BounceFromTop"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"bounceFromTop_TranslationX"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"bounceFromTop_TranslationY"];
}

#pragma mark - disappearTop

- (void)addDisappearTopAnimation
{
	[self addDisappearTopAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addDisappearTopAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addDisappearTopAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addDisappearTopAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addDisappearTopAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addDisappearTopAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addDisappearTopAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addDisappearTopAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeInOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
	CAMediaTimingFunction *anticipateTiming = [CAMediaTimingFunction functionWithControlPoints:0.42 :-0.30 :1.00 :1.00];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.375;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"DisappearTop"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"DisappearTop"]];
	}

	CAKeyframeAnimation *toastPlaceholderTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toastPlaceholderTranslationXAnimation.duration = 0.375;
	toastPlaceholderTranslationXAnimation.values = @[@(0.000), @(0.000), @(0.000)];
	toastPlaceholderTranslationXAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	toastPlaceholderTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming];
	toastPlaceholderTranslationXAnimation.beginTime = beginTime;
	toastPlaceholderTranslationXAnimation.fillMode = fillMode;
	toastPlaceholderTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationXAnimation forKey:@"disappearTop_TranslationX"];

	CAKeyframeAnimation *toastPlaceholderTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	toastPlaceholderTranslationYAnimation.duration = 0.375;
	toastPlaceholderTranslationYAnimation.values = @[@(0.000), @(20.000), @(-140.000)];
	toastPlaceholderTranslationYAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	toastPlaceholderTranslationYAnimation.timingFunctions = @[easeInOutTiming, anticipateTiming];
	toastPlaceholderTranslationYAnimation.beginTime = beginTime;
	toastPlaceholderTranslationYAnimation.fillMode = fillMode;
	toastPlaceholderTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationYAnimation forKey:@"disappearTop_TranslationY"];
}

- (void)removeDisappearTopAnimation
{
	[self.layer removeAnimationForKey:@"DisappearTop"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"disappearTop_TranslationX"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"disappearTop_TranslationY"];
}

#pragma mark - swipeFromRight

- (void)addSwipeFromRightAnimation
{
	[self addSwipeFromRightAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addSwipeFromRightAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addSwipeFromRightAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addSwipeFromRightAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addSwipeFromRightAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addSwipeFromRightAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addSwipeFromRightAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addSwipeFromRightAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *overshootTiming = [CAMediaTimingFunction functionWithControlPoints:0.00 :0.00 :0.58 :1.30];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.700;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"SwipeFromRight"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"SwipeFromRight"]];
	}

	CAKeyframeAnimation *toastPlaceholderTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toastPlaceholderTranslationXAnimation.duration = 0.700;
	toastPlaceholderTranslationXAnimation.values = @[@(771.758), @(0.000), @(-60.000), @(20.000), @(0.000), @(-10.000), @(0.000), @(0.000)];
	toastPlaceholderTranslationXAnimation.keyTimes = @[@(0.000), @(0.357), @(0.464), @(0.607), @(0.714), @(0.821), @(0.929), @(1.000)];
	toastPlaceholderTranslationXAnimation.timingFunctions = @[linearTiming, overshootTiming, overshootTiming, overshootTiming, linearTiming, linearTiming, linearTiming];
	toastPlaceholderTranslationXAnimation.beginTime = beginTime;
	toastPlaceholderTranslationXAnimation.fillMode = fillMode;
	toastPlaceholderTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationXAnimation forKey:@"swipeFromRight_TranslationX"];

	CAKeyframeAnimation *toastPlaceholderTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	toastPlaceholderTranslationYAnimation.duration = 0.700;
	toastPlaceholderTranslationYAnimation.values = @[@(0.000), @(0.000), @(0.000), @(0.000), @(0.000), @(0.000)];
	toastPlaceholderTranslationYAnimation.keyTimes = @[@(0.000), @(0.393), @(0.464), @(0.607), @(0.714), @(1.000)];
	toastPlaceholderTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	toastPlaceholderTranslationYAnimation.beginTime = beginTime;
	toastPlaceholderTranslationYAnimation.fillMode = fillMode;
	toastPlaceholderTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationYAnimation forKey:@"swipeFromRight_TranslationY"];
}

- (void)removeSwipeFromRightAnimation
{
	[self.layer removeAnimationForKey:@"SwipeFromRight"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"swipeFromRight_TranslationX"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"swipeFromRight_TranslationY"];
}

#pragma mark - disappearToRight

- (void)addDisappearToRightAnimation
{
	[self addDisappearToRightAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addDisappearToRightAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addDisappearToRightAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addDisappearToRightAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addDisappearToRightAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addDisappearToRightAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addDisappearToRightAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addDisappearToRightAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeInTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
	CAMediaTimingFunction *overshootTiming = [CAMediaTimingFunction functionWithControlPoints:0.00 :0.00 :0.58 :1.30];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.500;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"DisappearToRight"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"DisappearToRight"]];
	}

	CAKeyframeAnimation *toastPlaceholderTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toastPlaceholderTranslationXAnimation.duration = 0.500;
	toastPlaceholderTranslationXAnimation.values = @[@(0.000), @(-45.344), @(772.957)];
	toastPlaceholderTranslationXAnimation.keyTimes = @[@(0.000), @(0.400), @(1.000)];
	toastPlaceholderTranslationXAnimation.timingFunctions = @[overshootTiming, easeInTiming];
	toastPlaceholderTranslationXAnimation.beginTime = beginTime;
	toastPlaceholderTranslationXAnimation.fillMode = fillMode;
	toastPlaceholderTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationXAnimation forKey:@"disappearToRight_TranslationX"];

	CAKeyframeAnimation *toastPlaceholderTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	toastPlaceholderTranslationYAnimation.duration = 0.500;
	toastPlaceholderTranslationYAnimation.values = @[@(0.000), @(0.000), @(0.715)];
	toastPlaceholderTranslationYAnimation.keyTimes = @[@(0.000), @(0.400), @(1.000)];
	toastPlaceholderTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming];
	toastPlaceholderTranslationYAnimation.beginTime = beginTime;
	toastPlaceholderTranslationYAnimation.fillMode = fillMode;
	toastPlaceholderTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationYAnimation forKey:@"disappearToRight_TranslationY"];
}

- (void)removeDisappearToRightAnimation
{
	[self.layer removeAnimationForKey:@"DisappearToRight"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"disappearToRight_TranslationX"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"disappearToRight_TranslationY"];
}

#pragma mark - bounceFromBottom

- (void)addBounceFromBottomAnimation
{
	[self addBounceFromBottomAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addBounceFromBottomAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addBounceFromBottomAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addBounceFromBottomAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addBounceFromBottomAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addBounceFromBottomAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addBounceFromBottomAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addBounceFromBottomAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];
	CAMediaTimingFunction *overshootTiming = [CAMediaTimingFunction functionWithControlPoints:0.00 :0.00 :0.58 :1.30];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.500;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"BounceFromBottom"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"BounceFromBottom"]];
	}

	CAKeyframeAnimation *toastPlaceholderTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toastPlaceholderTranslationXAnimation.duration = 0.500;
	toastPlaceholderTranslationXAnimation.values = @[@(0.000), @(0.000), @(-0.258), @(-0.258)];
	toastPlaceholderTranslationXAnimation.keyTimes = @[@(0.000), @(0.350), @(0.750), @(1.000)];
	toastPlaceholderTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
	toastPlaceholderTranslationXAnimation.beginTime = beginTime;
	toastPlaceholderTranslationXAnimation.fillMode = fillMode;
	toastPlaceholderTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationXAnimation forKey:@"bounceFromBottom_TranslationX"];

	CAKeyframeAnimation *toastPlaceholderTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	toastPlaceholderTranslationYAnimation.duration = 0.500;
	toastPlaceholderTranslationYAnimation.values = @[@(404.348), @(250.000), @(280.660), @(264.430)];
	toastPlaceholderTranslationYAnimation.keyTimes = @[@(0.000), @(0.350), @(0.750), @(1.000)];
	toastPlaceholderTranslationYAnimation.timingFunctions = @[overshootTiming, easeOutTiming, overshootTiming];
	toastPlaceholderTranslationYAnimation.beginTime = beginTime;
	toastPlaceholderTranslationYAnimation.fillMode = fillMode;
	toastPlaceholderTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationYAnimation forKey:@"bounceFromBottom_TranslationY"];
}

- (void)removeBounceFromBottomAnimation
{
	[self.layer removeAnimationForKey:@"BounceFromBottom"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"bounceFromBottom_TranslationX"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"bounceFromBottom_TranslationY"];
}

#pragma mark - disappearToBottom

- (void)addDisappearToBottomAnimation
{
	[self addDisappearToBottomAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addDisappearToBottomAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addDisappearToBottomAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addDisappearToBottomAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addDisappearToBottomAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addDisappearToBottomAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addDisappearToBottomAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addDisappearToBottomAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeInTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
	CAMediaTimingFunction *anticipateTiming = [CAMediaTimingFunction functionWithControlPoints:0.42 :-0.30 :1.00 :1.00];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.375;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"DisappearToBottom"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"DisappearToBottom"]];
	}

	CAKeyframeAnimation *toastPlaceholderTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toastPlaceholderTranslationXAnimation.duration = 0.375;
	toastPlaceholderTranslationXAnimation.values = @[@(0.000), @(-0.254), @(0.000)];
	toastPlaceholderTranslationXAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	toastPlaceholderTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming];
	toastPlaceholderTranslationXAnimation.beginTime = beginTime;
	toastPlaceholderTranslationXAnimation.fillMode = fillMode;
	toastPlaceholderTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationXAnimation forKey:@"disappearToBottom_TranslationX"];

	CAKeyframeAnimation *toastPlaceholderTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	toastPlaceholderTranslationYAnimation.duration = 0.375;
	toastPlaceholderTranslationYAnimation.values = @[@(264.000), @(252.512), @(404.000)];
	toastPlaceholderTranslationYAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	toastPlaceholderTranslationYAnimation.timingFunctions = @[easeInTiming, anticipateTiming];
	toastPlaceholderTranslationYAnimation.beginTime = beginTime;
	toastPlaceholderTranslationYAnimation.fillMode = fillMode;
	toastPlaceholderTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[kPlaceholderName] layer] addAnimation:toastPlaceholderTranslationYAnimation forKey:@"disappearToBottom_TranslationY"];
}

- (void)removeDisappearToBottomAnimation
{
	[self.layer removeAnimationForKey:@"DisappearToBottom"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"disappearToBottom_TranslationX"];
	[[self.viewsByName[kPlaceholderName] layer] removeAnimationForKey:@"disappearToBottom_TranslationY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"DisappearTop"];
	[self.layer removeAnimationForKey:@"BounceFromBottom"];
	[self.layer removeAnimationForKey:@"BounceFromTop"];
	[self.layer removeAnimationForKey:@"DisappearToBottom"];
	[self.layer removeAnimationForKey:@"SwipeFromRight"];
	[self.layer removeAnimationForKey:@"DisappearToRight"];
}

@end